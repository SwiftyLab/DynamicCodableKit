{"identifier":{"url":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicDecodable","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Provides ","type":"text"},{"code":"castAs","type":"codeVoice"},{"text":" methods to customise dynamic casting to a provided type where provided type can be optional type or collection type as well. Default implementations are provided to work well with down casting, however custom types can provide their own casting behavior.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/TypeIdentifier"},{"type":"text","text":", to use "},{"code":"Set","type":"codeVoice"},{"type":"text","text":" of "},{"code":"Post","type":"codeVoice"},{"type":"text","text":" type instead of "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", a box type for "},{"code":"Post","type":"codeVoice"},{"type":"text","text":" type can be created that will confirm "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@dynamicMemberLookup","struct AnyPost<P>: Hashable {","    let value: P","","    init(withValue value: P) {","        self.value = value","    }","","    static func == (lhs: AnyPost<P>, rhs: AnyPost<P>) -> Bool {","        lhs.value as! AnyHashable == rhs.value as! AnyHashable","    }","","    func hash(into hasher: inout Hasher) {","        (value as! AnyHashable).hash(into: &hasher)","    }","","    subscript<T>(dynamicMember path: KeyPath<P,T>) -> T {","        return value[keyPath: path]","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"and custom ","type":"text"},{"type":"codeVoice","code":"castAs"},{"text":" implementation can be provided for casting to ","type":"text"},{"type":"codeVoice","code":"AnyPost"},{"type":"text","text":" box type:"}]},{"type":"codeListing","syntax":"swift","code":["extension DynamicDecodable where Self: Post {","    func castAs<T>(type: T.Type, codingPath: [CodingKey]) throws -> T {","        switch self {","        case let value as T:","            return value","        case _ where T.self is AnyPost<Post>.Type:","            return AnyPost(withValue: self as Post) as! T","        default:","            throw DecodingError.typeMismatch(T.self, codingPath: codingPath)","        }","    }","    func castAs<T: ExpressibleByNilLiteral>(type: T.Type, codingPath: [CodingKey]) -> T {","        return self as? T ?? AnyPost(withValue: self as Post) as? T ?? nil","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Finally, set of posts can be decoded with following ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" model:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ThrowingPostPageSet: Decodable {","    let next: URL","    @StrictDynamicDecodingCollectionWrapper<PostSetCodingKey, Set<AnyPost<Post>>> var content: Set<AnyPost<Post>>","}"]}]}],"relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/DynamicCodableKit\/Se"],"kind":"relationships","title":"Inherits From"}],"schemaVersion":{"major":0,"patch":0,"minor":2},"metadata":{"externalID":"s:17DynamicCodableKit0A9DecodableP","navigatorTitle":[{"text":"DynamicDecodable","kind":"identifier"}],"roleHeading":"Protocol","symbolKind":"protocol","role":"symbol","title":"DynamicDecodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicDecodable","kind":"identifier"}],"modules":[{"name":"DynamicCodableKit"}]},"abstract":[{"text":"A type that can be dynamically casted to multiple type,","type":"text"},{"text":" ","type":"text"},{"text":"allowing dynamic decoding.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dynamiccodablekit\/dynamicdecodable"]}],"topicSections":[{"identifiers":["doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable\/castAs(type:codingPath:)-1mmv2","doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable\/castAs(type:codingPath:)-4hwd","doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable\/castAs(type:codingPath:)-84ht0"],"title":"Instance Methods"}],"kind":"symbol","references":{"doc://DynamicCodableKit/Se":{"identifier":"doc:\/\/DynamicCodableKit\/Se","title":"Swift.Decodable","type":"unresolvable"},"doc://DynamicCodableKit/documentation/DynamicCodableKit/DynamicDecodable/castAs(type:codingPath:)-1mmv2":{"identifier":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable\/castAs(type:codingPath:)-1mmv2","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"castAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"type","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"codingPath","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"CodingKey","preciseIdentifier":"s:s9CodingKeyP","kind":"typeIdentifier"},{"text":"]) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Cast self as optional type ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" or initialize ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value.","type":"text"}],"kind":"symbol","type":"topic","title":"castAs(type:codingPath:)","url":"\/documentation\/dynamiccodablekit\/dynamicdecodable\/castas(type:codingpath:)-1mmv2","defaultImplementations":4,"required":true,"role":"symbol"},"doc://DynamicCodableKit/documentation/DynamicCodableKit/DynamicDecodable":{"abstract":[{"text":"A type that can be dynamically casted to multiple type,","type":"text"},{"text":" ","type":"text"},{"text":"allowing dynamic decoding.","type":"text"}],"title":"DynamicDecodable","role":"symbol","navigatorTitle":[{"text":"DynamicDecodable","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicDecodable","kind":"identifier"}],"type":"topic","url":"\/documentation\/dynamiccodablekit\/dynamicdecodable","identifier":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable"},"doc://DynamicCodableKit/documentation/DynamicCodableKit":{"role":"collection","identifier":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit","type":"topic","kind":"symbol","abstract":[{"text":"Access essential data types, property wrappers, and protocols to implement dynamic JSON decoding functionality working with Swiftâ€™s sound type system.","type":"text"}],"url":"\/documentation\/dynamiccodablekit","title":"DynamicCodableKit"},"doc://DynamicCodableKit/documentation/DynamicCodableKit/TypeIdentifier":{"url":"\/documentation\/dynamiccodablekit\/typeidentifier","kind":"article","role":"collectionGroup","abstract":[{"text":"Decode dynamic JSON objects based on single or mutiple identifiers that indicates the actual type to decode.","type":"text"}],"identifier":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/TypeIdentifier","type":"topic","title":"Decoding with Type Identifiers"},"doc://DynamicCodableKit/documentation/DynamicCodableKit/DynamicDecodable/castAs(type:codingPath:)-4hwd":{"role":"symbol","identifier":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable\/castAs(type:codingPath:)-4hwd","type":"topic","kind":"symbol","title":"castAs(type:codingPath:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"castAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"type","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"codingPath","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"CodingKey","preciseIdentifier":"s:s9CodingKeyP","kind":"typeIdentifier"},{"text":"]) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/dynamiccodablekit\/dynamicdecodable\/castas(type:codingpath:)-4hwd","abstract":[{"text":"Cast self as generic  type ","type":"text"},{"type":"codeVoice","code":"T"},{"text":".","type":"text"}],"defaultImplementations":4,"required":true},"doc://DynamicCodableKit/documentation/DynamicCodableKit/DynamicDecodable/castAs(type:codingPath:)-84ht0":{"type":"topic","title":"castAs(type:codingPath:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/DynamicCodableKit\/documentation\/DynamicCodableKit\/DynamicDecodable\/castAs(type:codingPath:)-84ht0","defaultImplementations":4,"required":true,"url":"\/documentation\/dynamiccodablekit\/dynamicdecodable\/castas(type:codingpath:)-84ht0","abstract":[{"type":"text","text":"Cast self as collection type "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"castAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"codingPath"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"CodingKey","preciseIdentifier":"s:s9CodingKeyP"},{"kind":"text","text":"]) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}]}}}